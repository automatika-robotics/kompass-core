[build-system]
requires = ["scikit-build-core", "nanobind"]
build-backend = "scikit_build_core.build"

[project]
name = "kompass_core"
version = "0.5.0"
description = "Navigation Algorithms Library for Kompass"
authors = [{ name = "Automatika Robotics", email = "contact@automatikarobotics.com" }]
readme = "README.md"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"]
license = { text = "MIT" }

keywords = ["robotics", "gpgpu", "navigation", "control", "planning", "mapping"]

dependencies = [
    "numpy<=1.26.4",
    "numpy-quaternion>=2023.0.3",
    "python-fcl-fork",
    "omegaconf",
    "attrs>=23.2.0",
    "pyyaml",
    "scipy",
    "matplotlib",
    "pandas",
]

requires-python = ">=3.8.4,<3.13"

[project.optional-dependencies]
dev = ["pip-tools", "pytest==8.0.0", "pre-commit", "opencv-python"]

[project.urls]
Homepage = "https://github.com/automatika-robotics/kompass-core"

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.8"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"
# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"
# Min cmake version
cmake.version = ">=3.5.0"
# Fast build
build.tool-args = ["-j8"]
# For vcpkg based builds
[tool.scikit-build.cmake.define]
CMAKE_TOOLCHAIN_FILE = {env="CMAKE_TOOLCHAIN_FILE"}
VCPKG_TARGET_TRIPLET = {env="VCPKG_TARGET_TRIPLET"}

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = [
    "tests"
]
python_files = 'test*.py'

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
exclude = ["setup.py", "docs", "build", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
quiet = false
whitelist-regex = []
color = true
generate-badge = "."
badge-format = "svg"

[tool.ruff]
extend-exclude = [".mypy_cache", ".tox", ".venv", "buck-out", "build", ".pytest_cache"]
fix = true
line-length = 88
preview = true
[tool.ruff.lint]
ignore = ["E203", "E266", "E501", "F403", "F401"]
select = ["B","C","E","F","W","B9"]
[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.bumpver]
current_version = "0.5.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "(chore) Bump version {old_version} -> {new_version}"
tag_message = "{new_version}"
tag_scope = "default"
pre_commit_hook = ""
post_commit_hook = ""
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'version = "{version}"',
]

[tool.cibuildwheel]
build-verbosity = 1
skip = ["pp*", "*musllinux*"]
test-requires = ["pytest", "opencv-python"]
test-command = "cd {package}/tests && pytest"
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
environment = {VCPKG_ROOT="/project/deps/vcpkg", CMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"}
before-all = "bash build_dependencies/install_linux.sh"

[[tool.cibuildwheel.overrides]]
select = "*-manylinux_x86_64"
inherit.environment = "append"
environment.VCPKG_TARGET_TRIPLET = "x64-linux-release"
environment.LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$VCPKG_ROOT/installed/$VCPKG_TARGET_TRIPLET/lib"

[[tool.cibuildwheel.overrides]]
select = "*-manylinux_aarch64"
inherit.environment = "append"
environment.VCPKG_TARGET_TRIPLET = "arm64-linux-release"
environment.LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$VCPKG_ROOT/installed/$VCPKG_TARGET_TRIPLET/lib"

